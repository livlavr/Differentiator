//OPERATOR(operation, operation_sign, EvalValue, LeftZeroSimplification,     RightZeroSimplification,
//                                               LeftOneSimplification,      RightOneSimplification,
//                                               LeftMinusOneSimplification, RightMinusOneSimplification,
//                                               Differentiated)

OPERATOR(ADD, "+", {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Add(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(SUB, "-", {
    EvalTwoArgsOperation(-);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->right)));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Sub(D(CP(node->left)), D(CP(node->right)));
}
)

OPERATOR(MUL, "*", {
    EvalTwoArgsOperation(*);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {{}}, {
    diff_result = Add(Mul(D(CP(node->left)), CP(node->right)), Mul(CP(node->left), D(CP(node->right))));
}
)

OPERATOR(DIV, "/", {
    EvalTwoArgsOperation(/);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {{}}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), CP((*node)->left)));
}, {
    diff_result = Div(Sub(Mul(D(CP(node->left)), CP(node->right)), Mul(CP(node->left), D(CP(node->left)))), Pow(CP(node->right), Num(2)));
}
)

OPERATOR(POW, "^", {
    double result = 0;
    result = pow((*node)->left->value.data.double_value, (*node)->right->value.data.double_value);
    ReplaceNodes(tree, node, Num(result));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {{}}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Div(Num(1), CP((*node)->left)));
}, {
    if(node->right->value.type == number) {
        diff_result = Mul(Mul(CP(node->right), Pow(CP(node->left), Sub(CP(node->right), Num(1)))), D(CP(node->left)));
    }
    else if(node->left->value.type == number) {
        diff_result = Mul(Mul(CP(node), Ln(CP(node->left))), D(CP(node->right)));
    }
    else {
        diff_result = D(Pow((Num(exp(1))), Mul(CP(node->right), Ln(CP(node->left)))));
    }
}
)

OPERATOR(SQRT, "sqrt", {
    EvalFunction(sqrt);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), Mul(Num(2), CP(node->left))), D(CP(node->left)));
}
)

OPERATOR(SIN, "sin", {
    EvalFunction(sin);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Cos(CP(node->left)), D(CP(node->left)));
}
)

OPERATOR(COS, "cos", {
    EvalFunction(cos);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Mul(Num(-1), Sin(CP(node->left))), D(CP(node->left)));
}
)

OPERATOR(LN, "ln", {
    EvalFunction(log);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(Div(Num(1), CP(node->left)), D(CP(node->left)));
}
)

OPERATOR(EXP, "exp", {
    EvalFunction(exp);
}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {
    diff_result = Mul(CP(node->left), D(CP(node->left)));
}
)
