//OPERATOR(operation, operation_sign, EvalValue, LeftZeroSimplification,     RightZeroSimplification,
//                                               LeftOneSimplification,      RightOneSimplification,
//                                               LeftMinusOneSimplification, RightMinusOneSimplification,
//                                               Differentiation)

OPERATOR(ADD, "+", {
    EvalTwoArgsOperation(+);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {}, {}, {}, {}, {
    Add(D(left), D(right));
}
)

OPERATOR(SUB, "-", {
    EvalTwoArgsOperation(-);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), (*node)->right));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {}, {}, {}, {}, {
    Sub(D(left), D(right));
}
)

OPERATOR(MUL, "*", {
    EvalTwoArgsOperation(*);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->right);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {}, {}, {
    Add(Mul(D(left), CP(right)), Mul(CP(left), D(right)));
}
)

OPERATOR(DIV, "/", {
    EvalTwoArgsOperation(/);
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), (*node)->left));
}, {
    Div(Sub(Mul(D(left), CP(right)), Mul(CP(left), D(right))), Pow(CP(right), Num(2)));
}
)

OPERATOR(POW, "^", {
    double result = 0;
    result = pow((*node)->left->value.data.double_value, (*node)->right->value.data.double_value);
    ReplaceNodes(tree, node, Num(result));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1));
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, (*node)->left);
}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Div(Num(1), (*node)->left));
}, {
    Mul(CP(right), Pow(CP(left), Sub(CP(right), Num(1))));
}
)

OPERATOR(SQRT, "sqrt", {
    EvalFunction(sqrt);
}, {}, {}, {}, {}, {}, {}, {
    Div(Num(1), Mul(Num(2)), CP(left));
}
)

OPERATOR(SIN, "sin", {
    EvalFunction(sin);
}, {}, {}, {}, {}, {}, {}, {
    Cos((*node)->left);
}
)

OPERATOR(COS, "cos", {
    EvalFunction(cos);
}, {}, {}, {}, {}, {}, {}, {
    Mul(Num(-1), Sin((*node)->left));
}
)

OPERATOR(LN, "ln", {
    EvalFunction(log2);
}, {}, {}, {}, {}, {}, {}, {
    Div(Num(1), (*node)->right);
}
)

OPERATOR(EXP, "exp", {
    EvalFunction(exp);
}, {}, {}, {}, {}, {}, {}, {}
)
