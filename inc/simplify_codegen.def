//Operator(number, operation, node, EvalValue(), LeftZeroSimplification,     RightZeroSimplification,
                                                 LeftOneSimplification,      RightOneSimplification,
                                                 LeftMinusOneSimplification, RightMinusOneSimplification,
                                                 Differentiation)

#define D(x) RecursiveSubtreeDerivation(x)
#define CP(x) CopySubtree(x)

Operator(ADD, "+", {
    EvalTwoArgsOperation(+)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->right)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->left)
}, {}, {}, {}, {}, {
    Add(D(left), D(right))
}
)

Operator(SUB, "-", {
    EvalTwoArgsOperation(-)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), node->right))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->left)
}, {}, {}, {}, {}, {
    Sub(D(left), D(right))
}
)

Operator(Mul, "*", {
    EvalTwoArgsOperation(*)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->right)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->left)
}, {}, {}, {
    Add(Mul(D(left), CP(right)), Mul(CP(left), D(right)))
}
)

Operator(DIV, "/", {
    EvalTwoArgsOperation(/)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0))
}, {}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->left)
}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Mul(Num(-1), node->left))
}, {
    Div(Sub(Mul(D(left), CP(right)), Mul(CP(left), D(right))), Pow(CP(right), Num(2)))
}
)

Operator(POW, "^", {
    EvalTwoArgsOperation(^)
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(0))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Num(1))
}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, node->left)
}, {}, {
    (*simplifications_number)++;
    ReplaceNodes(tree, node, Div(Num(1), node->left))
}, {
    Mul(CP(right), Pow(CP(left), Sub(CP(right), Num(1))))
}
)

Operator(SQRT, "sqrt", {
    EvalFunction(SQRT)
}, {}, {}, {}, {}, {}, {}, {
    Div(Num(1), Mul(Num(2)), CP(left))
}
)

Operator(SIN, "sin", {
    EvalFunction(SIN)
}, {}, {}, {}, {}, {}, {}, {
    Cos(node->left);
}
)

Operator(COS, "cos", {
    EvalFunction(COS)
}, {}, {}, {}, {}, {}, {}, {
    Mul(Num(-1), Sin(node->left));
}
)

Operator(LN, "ln", {
    EvalFunction(LN)
}, {}, {}, {}, {}, {}, {}, {
    Div(Num(1), node->right);
}
)

Operator(EXP, "exp", {
    EvalFunction(LN)
}, {}, {}, {}, {}, {}, {}, {}
)

#undef D
#undef CP
